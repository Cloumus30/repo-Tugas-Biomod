unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, opengl,
  ExtCtrls, StdCtrls, Spin, VclTee.TeeGDIPlus;

type
  TForm1 = class(TForm)
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
mat_specular : array [0..3] of GLfloat = ( 8.0, 8.0, 1.0, 0.0 );
mat_shininess : GLfloat = 40.0;
light_position : array [0..3] of GLfloat = ( 120.6, 14.0, 41.0, 10.7 );


  f0=1.0;
  f1=0.5;
  f2=0.5;
  f3=0.5;

var
  Form1: TForm1;
   rotangle,rotangle1,rotangle2,rotangle3:real;
  xpos,ypos,zpos:real;
  circlepoint:integer;
  angle:real;
  Sphere,cylinder,disk,partialdisk: GLUquadricObj;
  time:extended;
  fix_x,upperlimb,twoupper,cyl:boolean;
  thetadotdot,thetadot,theta,phidotdot,phidot,phi:real;
  torque,torque1,m,l,g,mint:real;
  k1,k2,k3,k4,dt,k11,k21,k31,k41:real;
  pitch,yaw,roll:real;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin

  theta:=30*pi/180;
  phi:=20*pi/180;
  thetadot:=0;
  phidot:=0;

  form1.myDC:= GetDC(Handle);
  SetupPixelFormat;
  myRC:= wglCreateContext(myDC);
  wglMakeCurrent(myDC, myRC);
  glEnable(GL_DEPTH_TEST);
  glLoadIdentity;

    glClearColor(0.0, 0.0, 0.0, 1.0); 	   // Black Background
    glShadeModel(GL_SMOOTH);                 // Enables Smooth Color Shading
    glClearDepth(1.0);                       // Depth Buffer Setup
    glEnable(GL_DEPTH_TEST);                 // Enable Depth Buffer
    glDepthFunc(GL_LESS);		           // The Type Of Depth Test To Do

    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

    glEnable(GL_TEXTURE_2D);

    Sphere := gluNewQuadric();
    cylinder:= gluNewQuadric();
    disk:=glunewquadric();
    partialdisk:=glunewquadric();
    gluQuadricNormals(Sphere, GLU_SMOOTH);   // Create Smooth Normals
    gluQuadricNormals(cylinder, GLU_SMOOTH);   // Create Smooth Normals
    gluQuadricNormals(disk, GLU_SMOOTH);   // Create Smooth Normals

    glMaterialfv(GL_FRONT, GL_SPECULAR, @mat_specular);
    glMaterialfv(GL_BACK, GL_SPECULAR, @mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, @mat_shininess);
     glMaterialfv(GL_BACK, GL_SHININESS, @mat_shininess);
    glLightfv(GL_LIGHT0, GL_POSITION, @light_position);
    glLightfv(GL_LIGHT3, GL_SPECULAR, @mat_specular);
    glLightfv(GL_LIGHT1, GL_POSITION, @light_position);
     glLightfv(GL_LIGHT2, GL_POSITION, @light_position);

    glEnable(GL_LIGHTING);
     glEnable(GL_LIGHT0);
      glEnable(GL_LIGHT1);
       glEnable(GL_LIGHT2);
         glEnable(GL_LIGHT3);
    glDepthFunc(GL_LEQUAL);

  rotangle:=0;
  rotangle1:=0;
  rotangle2:=0;
  rotangle3:=0;
  xpos:=-5;
  ypos:=0;
  zpos:=-10;
end;

end.
